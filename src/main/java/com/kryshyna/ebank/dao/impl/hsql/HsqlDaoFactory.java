package com.kryshyna.ebank.dao.impl.hsql;

import com.kryshyna.ebank.dao.*;

import java.sql.*;

/**
 * @author Vadym Kryshyna
 */
public class HsqlDaoFactory implements DaoFactory {
    private Connection connection;
    private AccountDao accountDao;
    private PersonDao personDao;
    private TransactionDao transactionDao;
    private TransactionFullDao transactionFullDao;

    public HsqlDaoFactory(){
        init();
        accountDao = new HsqlAccountDao(connection);
        personDao = new HsqlPersonDao(connection);
        transactionDao = new HsqlTransactionDao(connection);
        transactionFullDao = new HsqlTransactionFullDao(connection);
    }

    private void init(){
        try {
            Class.forName("org.hsqldb.jdbcDriver");
            connection = DriverManager.getConnection("jdbc:hsqldb:mem:ebank", "SA","");
            this.createTables(connection);
            this.fillTables(connection);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void createTables(Connection connection) throws SQLException {
        Statement statement = connection.createStatement();
        statement.executeUpdate("CREATE TABLE Persons(" +
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY," +
                "name VARCHAR(20) NOT NULL," +
                "address VARCHAR(20) NOT NULL)");

        statement.executeUpdate("CREATE TABLE Accounts("+
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY,"+
                "id_person INTEGER NOT NULL,"+
                "balance INTEGER NOT NULL,"+
                "title VARCHAR(20) NOT NULL)");

        statement.executeUpdate("CREATE TABLE Transactions("+
                "id INTEGER GENERATED BY DEFAULT AS IDENTITY,"+
                "idAccountDebit INTEGER NOT NULL,"+
                "idAccountCredit INTEGER NOT NULL,"+
                "sumTransaction INTEGER NOT NULL,)");
    }

    private void fillTables(Connection connection) throws SQLException {
        Statement statement = connection.createStatement();
        statement.executeUpdate("INSERT INTO Persons(name, address) VALUES ('Petrov Petr','Kiev')");
        statement.executeUpdate("INSERT INTO Persons(name, address) VALUES ('Ivanov Ivan','Lvov')");
        statement.executeUpdate("INSERT INTO Persons(name, address) VALUES ('Sidorov Sidr','Odessa')");
        statement.executeUpdate("INSERT INTO Persons(name, address) VALUES ('Barak Obama','Vinitsa')");

        statement.executeUpdate("INSERT INTO Accounts(id_person, balance, title) VALUES (1, 100, 'debit')");
        statement.executeUpdate("INSERT INTO Accounts(id_person, balance, title) VALUES (1, 50, 'credit')");
        statement.executeUpdate("INSERT INTO Accounts(id_person, balance, title) VALUES (2, 200, 'debit')");
        statement.executeUpdate("INSERT INTO Accounts(id_person, balance, title) VALUES (2, 300, 'credit')");
        statement.executeUpdate("INSERT INTO Accounts(id_person, balance, title) VALUES (3, 800, 'debit')");
        statement.executeUpdate("INSERT INTO Accounts(id_person, balance, title) VALUES (3, 400, 'credit')");

        statement.executeUpdate("INSERT INTO Transactions (idAccountDebit, idAccountCredit, sumTransaction) VALUES (1,2,20)");
        statement.executeUpdate("INSERT INTO Transactions (idAccountDebit, idAccountCredit, sumTransaction) VALUES (2,3,30)");
        statement.executeUpdate("INSERT INTO Transactions (idAccountDebit, idAccountCredit, sumTransaction) VALUES (3,4,50)");
        statement.executeUpdate("INSERT INTO Transactions (idAccountDebit, idAccountCredit, sumTransaction) VALUES (4,1,10)");
        statement.executeUpdate("INSERT INTO Transactions (idAccountDebit, idAccountCredit, sumTransaction) VALUES (3,1,40)");
        statement.executeUpdate("INSERT INTO Transactions (idAccountDebit, idAccountCredit, sumTransaction) VALUES (4,2,30)");
    }


    @Override
    public PersonDao getPersonDao() {
        return personDao;
    }

    @Override
    public AccountDao getAccountDao() {
        return accountDao;
    }

    @Override
    public TransactionDao getTransactionDao() {
        return transactionDao;
    }

    @Override
    public TransactionFullDao getTransactionFullDao() {
        return transactionFullDao;
    }

}
